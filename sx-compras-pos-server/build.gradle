buildscript {
    repositories {
        mavenLocal()
        //maven { url "http://repo.grails.org/grails/core" }
        maven { url "https://repo.grails.org/artifactory/core/"}
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
    }
}

version "1.0.2"
group "sx.compras.pos"

apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin: 'project-report'
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()
    //maven { url "http://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/artifactory/core/"}
    maven { url "http://dl.bintray.com/rcancino/cfdi"}
    maven { url "http://dl.bintray.com/rcancino/econta"}
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile "org.grails.plugins:build-test-data:3.3.1" // Test

    compile 'org.codehaus.groovy:groovy-all:2.4.11'
    compile 'org.apache.commons:commons-lang3:3.1'
    runtime 'mysql:mysql-connector-java'

    // compile "lx.siipapx:sx-core-plugin:1.0.0"
    // compile 'com.google.firebase:firebase-admin:6.1.0'
    compile 'com.github.groovy-wslite:groovy-wslite:1.1.2'

    // Grails console
    compile "org.grails.plugins:gsp"
    runtime 'org.grails.plugins:grails-console:2.1.1'

    /** Jasper plugin **/
    compile 'org.grails.plugins:jasper:2.1.0.RC1'
    compile 'org.eclipse.jdt.core.compiler:ecj:4.4'
    /****/

    compile 'org.grails.plugins:spring-security-core:3.2.1'
    compile 'org.grails.plugins:spring-security-rest:2.0.0.RC1'
    implementation 'com.google.firebase:firebase-admin:6.11.0'

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    jvmArgs('-Xmx1024m')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
    systemProperties System.properties
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

springBoot {
    executable = true
}


war {
    String env = System.getProperty('grails.env') ?: 'prod'
    war.baseName = "siipapx-compras-pos"
    war.version = ''
}

task buildConf() {
    doLast {
        String fileName = war.archiveName.replaceAll(".war", ".conf")
        File file = file("build/libs/${fileName}")
        file.append("JAVA_OPTS=-Xmx1024M")
        file.append("\nRUN_ARGS=\"--JDBC_CONNECTION_STRING=10.10.1.229/siipapx_tacuba --server.port=9197\"")

    }
}

war.finalizedBy(buildConf)

